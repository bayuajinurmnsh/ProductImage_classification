# -*- coding: utf-8 -*-
"""product_image_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vuF8_FEXT1EKlz3mUCT7bANYEsBbrZwa
"""

!pip install opendatasets

import opendatasets as od

od.download('https://www.kaggle.com/paramaggarwal/fashion-product-images-small')

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns

"""<h4>Open and preprocessing csv dataset </h4>"""

#read the csv file
df = pd.read_csv('/content/fashion-product-images-small/styles.csv', error_bad_lines=False , nrows=10000 , usecols=['id','masterCategory'])
df.head()

df.masterCategory.value_counts()

sns.countplot(x=df.masterCategory)
plt.show()

#hapus data free dan sporting goods

new_df = df[df['masterCategory'] !='Free Items']
new_df = new_df[new_df['masterCategory'] !='Sporting Goods']

sns.countplot(x=new_df.masterCategory)
plt.show()

df.info()

#add .jpg to column id , because id number get from images name

new_df['image'] = new_df.apply(lambda row: str(row['id']) + ".jpg", axis=1)
new_df = new_df.sample(frac=1).reset_index(drop=True)
new_df.head()

"""<h4> Preprocess images using ImageDataGenerator </h4>"""

from keras_preprocessing.image import ImageDataGenerator

path = '/content/fashion-product-images-small/'

image_generator = ImageDataGenerator(
    validation_split=0.2,
)

train_generator = image_generator.flow_from_dataframe(
    dataframe=new_df,
    directory=path + "images",
    x_col="image",
    y_col="masterCategory",
    target_size=(96,96),
    batch_size=16,
    subset="training",
    class_mode ="categorical",
    color_mode="rgb"
)

validation_generator = image_generator.flow_from_dataframe(
    dataframe=new_df,
    directory=path + "images",
    x_col="image",
    y_col="masterCategory",
    target_size=(96,96),
    batch_size=16,
    subset="validation",
    class_mode="categorical",
    color_mode="rgb"
)

#count how many classes that we have
classes = len(train_generator.class_indices)
print(classes)

from keras.applications.mobilenet_v2 import MobileNetV2

tf.keras.backend.clear_session()

tf.random.set_seed(42)

model = tf.keras.Sequential([
      MobileNetV2(weights = "imagenet", include_top = False ,input_shape=(96,96,3)),
      tf.keras.layers.GlobalAveragePooling2D(),
      tf.keras.layers.Dense(1024, activation='relu'),
      tf.keras.layers.Dense(classes, activation='softmax')
  ])

model.layers[0].trainable = False

"""<h4> Callbacks </h4>"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>=0.90 and logs.get('val_accuracy')>=0.90):
      print("\nAkurasi telah mencapai >=75%!")
      self.model.stop_training = True
callbacks_acc = myCallback()

callbacks_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=0.1,
                                                    patience=10, min_lr=1e-5)

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
  )

history = model.fit(
    train_generator, 
    steps_per_epoch = train_generator.n // 32,
    epochs = 2,
    validation_data=validation_generator,
    callbacks = [callbacks_acc, callbacks_lr],
    verbose=2
)

"""<h4> Prediksi gambar </h4>"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

# predicting images

uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(96,96))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  result = np.argmax(model.predict(images, batch_size=10))
  

  if result==0:
    print('Accessories')
  elif result==1:
    print('Apparel')
  elif result==2:
    print('Footwear')
  else:
    print('Personal Care')